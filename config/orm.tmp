// Import sql connection
var conn = require('../config/connection.js');
var bcrypt = require("bcryptjs");

//inside create function
//  user.password = bcrypt.hashSync(user.password, bcrypt.genSaltSync(10), null);

// Helper function for SQL syntax.
// Let's say we want to pass 3 values into the mySQL query.
// In order to write the query, we need 3 question marks.
// The above helper function loops through and creates an array of question marks - ["?", "?", "?"] - and turns it into a string.
// ["?", "?", "?"].toString() => "?,?,?";
function printQuestionMarks(num) {
    var arr = [];
  
    for (var i = 0; i < num; i++) {
      arr.push("?");
    }
  
    return arr.toString();
  };

// Helper function to convert object key/value pairs to SQL syntax
function objToSql(ob) {
    var arr = [];
  
    // loop through the keys and push the key/value as a string int arr
    for (var key in ob) {
      var value = ob[key];
      // check to skip hidden properties
      if (Object.hasOwnProperty.call(ob, key)) {
        // if string with spaces, add quotations (Lana Del Grey => 'Lana Del Grey')
        if (typeof value === "string" && value.indexOf(" ") >= 0) {
          value = "'" + value + "'";
        }
        // e.g. {name: 'Lana Del Grey'} => ["name='Lana Del Grey'"]
        // e.g. {sleepy: true} => ["sleepy=true"]
        arr.push(key + "=" + value);
      }
    }
  
    // translate array of strings to a single comma-separated string
    return arr.toString();
  };
  
var orm = {


/*  actortype boolean not null,
	firstName varchar(25) not null,
	lastName varchar(25) not null,
	address1 varchar(50) not null,
	address2 varchar(50),
	city varchar(15) not null,
	st enum("AK", "AL", "AR", "AS", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "GU", "HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", "MO", "MP", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UM", "UT", "VA", "VI", "VT", "WA", "WI", "WV", "WY") not null,
	phone int not null,
	phoneType enum("landline", "mobile"),
	zip5 int not null,
	lat decimal(10,3),
	lng decimal(10,3), 
	username varchar(20),
	pw varchar(25),
    createActor: function(newActor){ */
        //if Username isn't valid return error
        //assume 
/*     }, */

    // create valid email function here and return true/false

    //getActor need -- for passport authentication

    // Walker Tasks
    // List appointments: can be for booked or unbooked slots
    // if booked == false, unbooked
    // if booked == true booked.
    //wid = Walker ID, booked = booked

    bookedStatus: function(wid, booked, cb){
        var queryString = ""
        if(booked){
        // for booked appointments
        queryString = `
            SELECT
                l.dogwalkerId, l.walkDate, l.timeSlot, l.dogUser, r.dogName, c.firstName, c.lastName 
            FROM
                appmnt l
            left join 
                dog r
            on
                l.dogUser = r.id
            left join
                dogactor c
            on
                r.dogownerId = c.id
            where
                l.dogwalkerId = ${wid}
                AND c.actortype; 
        `
        // actortype is boolean
        } else {

        //Appt not booked
        queryString = `
            select 
                walkDate, timeSlot
            from
                appmnt
            where 
                dogUser = ${0} AND dogwalkerId = ${wid}`
        }; 
        console.log(queryString);
        conn.query(queryString, function(err, result){
            if (err) throw err;
            cb(result);
        });
    },

    // did = dogwalkerID, wd = walkDate, ts = timeSlot
    addAppt: function(did, wd, ts, cb){
        var queryString = `
        INSERT INTO 
            appmnt 
            (dogwalkerId, walkDate, timeSlot, dateAdded)
        VALUES
            (${did}, ${wd}, ${ts}, NOW());
        `;
        console.log(queryString);

        conn.query(queryString, vals, function(err, result){
            if(err) throw err;
            cb(result);
        });
    },

    //Function for setting appt availability
    // did = dogwalkerID, wd = walkDate, ts = timeSlot, 
    //du = dogUser
    updateAppt: function(did, wd, ts, du, cb){
        var queryString = 
        `UPDATE appmnt
        SET
            dogUser = ${du}
        WHERE
            dogwalkerId = ${did} 
            AND walkDate = ${wd}
            AND timeSlot = ${ts};`;
        console.log(queryString);
        conn.query(queryString, function(err, result){
            if (err) throw err;
            cb(result);
        });
    },
    //fn = firstName, ln = lastName, add1 = address1
    // add2 = address2, cty = city, s =st, 
    // z5 = zip5, ph = phone, pt = phoneType
    updateWalker: function(id, fn, ln, add1, add2, cty, s, z5, ph, pt, cb){
        var queryString = 
            `UPDATE 
                dogactor
            SET
                firstName = ${fn},
                lastName = ${ln},
                address1 = ${add1},
                address2 = ${add2},
                city = ${cty},
                st = ${s},
                zip5 = ${z5},
                phone = ${ph},
                phoneType= ${pt}
            WHERE
                id =${id}
                AND NOT actortype;
        `;
        console.log(queryString);
        conn.query(queryString, function(err, result){
            if (err) throw err;
            cb(result);
        });
    },

    // dogwalkerid = dwid, walkdate = wd, timeslot = ts
    // this will also delete appointments even if it's 
    // booked -- need prior step check
    deleteAppt: function(dwid, wd, ts, cb){
        var queryString = 
    `DELETE FROM
        appmnt
    where
        dogwalkerId = ${dwid}
        AND walkDate = ${wd}
        AND timeSlot = ${ts};`
        console.log(queryString);
        conn.query(queryString, function(err, result){
            if (err) throw err;
            cb(result);
        });
    },
    // This delete a walker, however one step prior
    // need to check if an open appointments
    // before deleting
    // if there are appointments, cannot delete
    // id is id from dogwalker
    deleteWalker: function(id, cb){
        var queryString = 
        `DELETE FROM 
            dogactor
        WHERE
            id = ${id}`;

        console.log(queryString);
        conn.query(queryString, function(err, result){
            if (err) throw err;
            cb(result);
        });
    },

    // Owner Tasks
    // get all booked walks for my dogs.
    // dg == dogownerId
    getWalks: function(dg, cb){
        var queryString = `
            SELECT l.id AS id, l.dogname, c.walkDate, c.timeSlot  
            FROM 
                dog l
            LEFT JOIN
                dogactor r
            ON
               l.dogownerId = r.id
            LEFT JOIN
                appmnt c
            ON
              c.dogUser = l.id
            WHERE r.id = ${dg}
            AND r.actortype
            `
        console.log(queryString);
        conn.query(queryString, function(err, result){
            if (err) throw err;
            cb(result);
        });
    },

    // This will update any parameter in the appt table
    // for a specific dog, however other checks will 
    // be needed to ensure appt and walker availability
    // dwid = dogwakerId, wd = walkDate, ts = timeSlot, 
    // du = dogUser, cncl = true to cancel false to change

    updateWalk: function(dwid, wd, ts, du, cncl, cb){
        var queryString = ""

        if(!cncl){
            queryString = 
            `UPDATE 
                appmnt
            SET
                dogwalkerId = ${dwid},
                walkDate = ${wd},
                timeSlot = ${ts},
            where
                dogUser = ${du};
                `
        } else {
            queryString = 
            `UPDATE 
                appmnt
            SET
                dogUser = 0
            WHERE
                dogUser = ${du}`;
        }

        console.log(queryString);
        conn.query(queryString, function(err, result){
            if (err) throw err;
            cb(result);
        });
    },

    // doid = dogownerId, dn = dogName, bd = breed
    // One prior step, must ensure owner exists 

    addNewDog:function(doid, dn, bd, cb){
        var queryString = 
        `INSERT INTO 
            dog (dogownerId, dogName, breed, dateAdded)
        VALUES
            (${doid}, ${dn}, ${bd}, NOW());
        `
        console.log(queryString);
        conn.query(queryString, function(err, result){
            if (err) throw err;
            cb(result);
        });
    },

    // dwid = dogwalkerId, wd = walkDate,
    // ts = timeSlot, du = dogUser
    // one step prior must check if dog exists
    bookWalk: function(dwid, wd, ts, du, cb){
        var queryString = 
        `UPDATE 
            appmnt
        SET 
            dogUser = ${du}
        WHERE
            dogwalkerId = ${dwid}
            AND walkDate = ${wd}
            AND timeSlot = ${ts}
        `

        console.log(queryString);
        conn.query(queryString, function(err, result){
            if (err) throw err;
            cb(result);
        });
    },
    //fn = firstName, ln = lastName, add1 = address1
    // add2 = address2, cty = city, s =st, 
    // z5 = zip5, ph = phone, pt = phoneType
    updateActor: function(id, fn, ln, add1, add2, cty, s, z5, ph, pt, cb){
        var queryString = 
            `UPDATE 
                dogactor
            SET
                firstName = ${fn},
                lastName = ${ln},
                address1 = ${add1},
                address2 = ${add2},
                city = ${cty},
                st = ${s},
                zip5 = ${z5},
                phone = ${ph},
                phoneType= ${pt}
            WHERE
                id =${id}
                AND actortype;
        `;
        console.log(queryString);
        conn.query(queryString, function(err, result){
            if (err) throw err;
            cb(result);
        });
    },
    // In acutality nothing to change other than
    // delete in the event of giving dog away
    // or dog dies
    // did = dogOwnerId
    deleteDog: function(id, did, cb){
        var queryString = 
            `DELETE FROM 
                dog
            WHERE
                id = ${id}
                AND dogownerId = ${did};
            `;
            console.log(queryString);
            conn.query(queryString, function(err, result){
                if (err) throw err;
                cb(result);
            });
    },

/*     validPw: function(ud, pw) */
    //pass bcrypt coparison
};

//export ORM
module.exports = orm;
